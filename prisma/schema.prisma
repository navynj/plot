generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  icon          String?
  image         String?
  birthDate     DateTime?
  tel           String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Account       Account[]
  Category      Category[]
  Session       Session[]
  Subject       Subject[]
  Time          Time[]
  Todo          Todo[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  title     String
  rank      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])
  Subject   Subject[]
}

model Subject {
  id         String    @id @default(cuid())
  title      String
  icon       String
  categoryId String?
  rank       String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
  Todo       Todo[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  todoId      String?
  repeatingId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Todo        Todo?    @relation(fields: [todoId], references: [id])
}

model Todo {
  id              String     @id @default(cuid())
  title           String
  content         String?
  icon            String?
  thumbnail       String?
  subjectId       String?
  scheduleEnd     Time?      @relation("end", fields: [scheduleEndId], references: [id])
  scheduleStart   Time?      @relation("start", fields: [scheduleStartId], references: [id])
  isDone          Boolean    @default(false)
  isRepeating     Boolean?   @default(false)
  repeatingDays   Int[]      @default([])
  repeatingDates  Int[]      @default([])
  repeatingStart  DateTime?
  repeatingEnd    DateTime?
  excludeDates    DateTime[] @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  userId          String
  rank            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  scheduleEndId   String?    @unique
  scheduleStartId String?    @unique
  date            String     @default("")
  history         History[]
  tags            Tag[]
  subject         Subject?   @relation(fields: [subjectId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
}

model Time {
  id        String    @id @default(cuid())
  time      DateTime?
  date      String
  rank      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  endTodo   Todo?     @relation("end")
  startTodo Todo?     @relation("start")
}

model History {
  id        String   @id @default(cuid())
  start     DateTime
  end       DateTime
  todoId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Todo      Todo?    @relation(fields: [todoId], references: [id])
}
