generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  icon          String?
  image         String?
  birthDate     DateTime?
  tel           String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Account       Account[]
  Category      Category[]
  Session       Session[]
  Profile       Profile[]
  Time          Time[]
  Track         Track[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  title     String
  rank      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  Profile   Profile[]
}

model Profile {
  id         String    @id @default(cuid())
  title      String
  icon       String
  categoryId String?
  rank       String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  Tracks     Track[]
  Albums     Album[]
}

model Album {
  id          String  @id @default(cuid())
  title       String
  icon        String
  thumbnail   String?
  profileId   String
  description String?
  Profile     Profile @relation(fields: [profileId], references: [id])
  Tracks      Track[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  trackId     String?
  repeatingId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  track       Track?   @relation(fields: [trackId], references: [id])
}

model Track {
  id              String         @id @default(cuid())
  title           String?
  icon            String?
  thumbnail       String?
  profileId       String?
  albumId         String?
  scheduleEnd     Time?          @relation("end", fields: [scheduleEndId], references: [id])
  scheduleStart   Time?          @relation("start", fields: [scheduleStartId], references: [id])
  isDone          Boolean        @default(false)
  isRepeating     Boolean?       @default(false)
  repeatingDays   Int[]          @default([])
  repeatingDates  Int[]          @default([])
  repeatingStart  DateTime?
  repeatingEnd    DateTime?
  excludeDates    DateTime[]     @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  userId          String
  rank            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  scheduleEndId   String?        @unique
  scheduleStartId String?        @unique
  date            String         @default("")
  Histories       History[]
  album           Album?         @relation(fields: [albumId], references: [id])
  Tags            Tag[]
  profile         Profile?       @relation(fields: [profileId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  log             Log?           @relation(fields: [logId], references: [id])
  logId           String?        @unique
  LinkedLogs      TracksOnLogs[]
}

model Log {
  id           String         @id @default(cuid())
  title        String?
  content      String
  page         Page?          @relation(fields: [pageId], references: [id])
  Track        Track?
  LinkedTracks TracksOnLogs[]
  pageId       String?
}

model Page {
  id    String @id @default(cuid())
  title String
  Log   Log[]
}

model TracksOnLogs {
  log     Log    @relation(fields: [logId], references: [id])
  track   Track  @relation(fields: [trackId], references: [id])
  logId   String
  trackId String

  @@id([logId, trackId])
}

model Time {
  id         String    @id @default(cuid())
  time       DateTime?
  date       String
  rank       String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  endTrack   Track?    @relation("end")
  startTrack Track?    @relation("start")
}

model History {
  id        String   @id @default(cuid())
  start     DateTime
  end       DateTime
  trackId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track?   @relation(fields: [trackId], references: [id])
}
