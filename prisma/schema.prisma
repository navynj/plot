// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String     @id @default(cuid())
  username  String?    @unique
  email     String?    @unique
  password  String?
  icon      String
  nickname  String     @unique
  birthDate DateTime?
  tel       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Todo      Todo[]
  Category  Category[]
}

model Category {
  id      String    @id @default(cuid())
  title   String
  Subject Subject[]
  User    User?     @relation(fields: [userId], references: [id])
  userId  String?
}

model Subject {
  title      String    @unique
  icon       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Todo       Todo[]

  @@id([title, icon])
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  Todo   Todo?   @relation(fields: [todoId], references: [id])
  todoId String?
}

model Todo {
  id            String    @id @default(cuid())
  title         String
  content       String?
  icon          String?
  thumbnail     String?
  subject       Subject?  @relation(fields: [subjectTitle, subjectIcon], references: [title, icon])
  subjectTitle  String?
  subjectIcon   String?
  tags          Tag[]
  scheduleStart DateTime?
  scheduleEnd   DateTime?
  repeatingDays Int[]     @default([])
  history       History[]
  isDone        Boolean   @default(false)
  date          DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model History {
  id     String   @id @default(cuid())
  start  DateTime
  end    DateTime
  Todo   Todo?    @relation(fields: [todoId], references: [id])
  todoId String?
}
